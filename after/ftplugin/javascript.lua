-- local ts_utils = require('nvim-treesitter.ts_utils')
--
-- -- This function will add a JSDoc comment to the current function
-- vim.keymap.set('n', '<leader>dc', function()
-- 	local fn_node = ts_utils.get_node_at_cursor()
--
-- 	print(fn_node:type())
--
-- 	while fn_node:type() ~= "function_declaration" do
-- 		fn_node = fn_node:parent()
-- 		if not fn_node then
-- 			return
-- 		end
-- 	end
--
-- 	local get_text = function(n)
-- 		local range = { n:range() }
-- 		return vim.api.nvim_buf_get_lines(0, range[1], range[3] + 1, false)[1]:sub(range[2] + 1, range[4])
-- 	end
--
--
-- 	local fn_name = get_text(fn_node:field("name")[1])
-- 	local params = fn_node:field("parameters")[1]
-- 	local param_names = {}
-- 	for param in params:iter_children() do
-- 		if param:type() == "identifier" then
-- 			table.insert(param_names, get_text(param))
-- 		end
-- 	end
--
-- 	local comment = "/**\n * " .. fn_name .. "\n"
-- 	for _, param in ipairs(param_names) do
-- 		comment = comment .. " * @param  {type} " .. param .. "\n"
-- 	end
-- 	comment = comment .. " * @return {type}\n */"
-- 	local comment_lines = vim.split(comment, "\n")
--
-- 	local fn_range = { fn_node:range() }
-- 	vim.api.nvim_buf_set_lines(0, fn_range[1], fn_range[1], false, comment_lines)
-- 	 -- move the cursor to the first line of the comment
-- 	vim.api.nvim_win_set_cursor(0, { fn_range[1] + 2, 3 })
--
-- 	print(comment)
-- end)
